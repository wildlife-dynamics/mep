# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details
import json
import os

from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.io import set_gee_connection
from ecoscope_workflows_core.tasks.filter import set_time_range
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_ext_ecoscope.tasks.io import download_roi
from ecoscope_workflows_core.tasks.groupby import split_groups
from ecoscope_workflows_ext_ecoscope.tasks.io import calculate_ndvi_range
from ecoscope_workflows_ext_ecoscope.tasks.results import draw_historic_timeseries
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import create_plot_widget_single_view
from ecoscope_workflows_core.tasks.results import merge_widget_views
from ecoscope_workflows_core.tasks.results import gather_dashboard

from ..params import Params


def main(params: Params):
    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    workflow_details = (
        set_workflow_details.validate()
        .handle_errors(task_instance_id="workflow_details")
        .partial(**(params_dict.get("workflow_details") or {}))
        .call()
    )

    gee_client = (
        set_gee_connection.validate()
        .handle_errors(task_instance_id="gee_client")
        .partial(**(params_dict.get("gee_client") or {}))
        .call()
    )

    time_range = (
        set_time_range.validate()
        .handle_errors(task_instance_id="time_range")
        .partial(
            time_format="%d %b %Y %H:%M:%S %Z", **(params_dict.get("time_range") or {})
        )
        .call()
    )

    groupers = (
        set_groupers.validate()
        .handle_errors(task_instance_id="groupers")
        .partial(**(params_dict.get("groupers") or {}))
        .call()
    )

    roi = (
        download_roi.validate()
        .handle_errors(task_instance_id="roi")
        .partial(**(params_dict.get("roi") or {}))
        .call()
    )

    split_roi_groups = (
        split_groups.validate()
        .handle_errors(task_instance_id="split_roi_groups")
        .partial(
            df=roi, groupers=groupers, **(params_dict.get("split_roi_groups") or {})
        )
        .call()
    )

    calculate_ndvi = (
        calculate_ndvi_range.validate()
        .handle_errors(task_instance_id="calculate_ndvi")
        .partial(
            client=gee_client,
            time_range=time_range,
            img_coll_name="MODIS/061/MYD13A1",
            **(params_dict.get("calculate_ndvi") or {}),
        )
        .mapvalues(argnames=["roi"], argvalues=split_roi_groups)
    )

    draw_ndvi = (
        draw_historic_timeseries.validate()
        .handle_errors(task_instance_id="draw_ndvi")
        .partial(
            current_value_column="NDVI",
            current_value_title="NDVI",
            historic_min_column="min",
            historic_max_column="max",
            historic_mean_column="mean",
            **(params_dict.get("draw_ndvi") or {}),
        )
        .mapvalues(argnames=["dataframe"], argvalues=calculate_ndvi)
    )

    persist_ndvi = (
        persist_text.validate()
        .handle_errors(task_instance_id="persist_ndvi")
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            **(params_dict.get("persist_ndvi") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=draw_ndvi)
    )

    ndvi_chart_widget = (
        create_plot_widget_single_view.validate()
        .handle_errors(task_instance_id="ndvi_chart_widget")
        .partial(title="NDVI Trends", **(params_dict.get("ndvi_chart_widget") or {}))
        .map(argnames=["view", "data"], argvalues=persist_ndvi)
    )

    grouped_ndvi_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="grouped_ndvi_widget")
        .partial(
            widgets=ndvi_chart_widget, **(params_dict.get("grouped_ndvi_widget") or {})
        )
        .call()
    )

    ndvi_dashboard = (
        gather_dashboard.validate()
        .handle_errors(task_instance_id="ndvi_dashboard")
        .partial(
            details=workflow_details,
            widgets=grouped_ndvi_widget,
            time_range=time_range,
            groupers=groupers,
            **(params_dict.get("ndvi_dashboard") or {}),
        )
        .call()
    )

    return ndvi_dashboard
