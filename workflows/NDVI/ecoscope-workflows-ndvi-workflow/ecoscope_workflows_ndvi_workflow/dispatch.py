# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


import traceback

from pydantic import BaseModel

from .dags import (
    run_async,
    run_async_mock_io,
    run_sequential,
    run_sequential_mock_io,
)
from .params import Params
from .response import ResponseModel


def dispatch(
    execution_mode: str,  # TODO: literal type
    mock_io: bool,
    params: Params,
) -> ResponseModel:
    match execution_mode, mock_io:
        case ("async", True):
            dispatcher = run_async_mock_io
        case ("async", False):
            dispatcher = run_async
        case ("sequential", True):
            dispatcher = run_sequential_mock_io
        case ("sequential", False):
            dispatcher = run_sequential
        case _:
            raise ValueError(f"Invalid execution mode: {execution_mode}")

    try:
        result: BaseModel = dispatcher(params=params)
        resp = {"result": result.model_dump()}
    except Exception as e:
        trace = traceback.format_exc()
        resp = {"error": str(e), "trace": trace}

    return ResponseModel(**resp)
