# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details

# ruff: noqa: E402

"""WARNING: This file is generated in a testing context and should not be used in production.
Lines specific to the testing context are marked with a test tube emoji (ðŸ§ª) to indicate
that they would not be included (or would be different) in the production version of this file.
"""

import json
import os
import warnings  # ðŸ§ª
from ecoscope_workflows_core.testing import create_task_magicmock  # ðŸ§ª


from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.io import set_er_connection
from ecoscope_workflows_core.tasks.filter import set_time_range

get_subjectgroup_observations = create_task_magicmock(  # ðŸ§ª
    anchor="ecoscope_workflows_ext_ecoscope.tasks.io",  # ðŸ§ª
    func_name="get_subjectgroup_observations",  # ðŸ§ª
)  # ðŸ§ª
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import process_relocations
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import (
    relocations_to_trajectory,
)
from ecoscope_workflows_core.tasks.transformation import add_temporal_index
from ecoscope_workflows_core.tasks.transformation import map_columns
from ecoscope_workflows_ext_ecoscope.tasks.transformation import apply_classification
from ecoscope_workflows_core.tasks.groupby import split_groups
from ecoscope_workflows_ext_ecoscope.tasks.results import set_base_maps
from ecoscope_workflows_core.tasks.transformation import sort_values
from ecoscope_workflows_ext_ecoscope.tasks.transformation import apply_color_map
from ecoscope_workflows_core.tasks.transformation import map_values_with_unit
from ecoscope_workflows_ext_ecoscope.tasks.results import create_polyline_layer
from ecoscope_workflows_ext_ecoscope.tasks.results import draw_ecomap
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import create_map_widget_single_view
from ecoscope_workflows_core.tasks.results import merge_widget_views
from ecoscope_workflows_core.tasks.results import gather_dashboard

from ..params import Params


def main(params: Params):
    warnings.warn("This test script should not be used in production!")  # ðŸ§ª

    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    workflow_details = (
        set_workflow_details.validate()
        .handle_errors(task_instance_id="workflow_details")
        .partial(**(params_dict.get("workflow_details") or {}))
        .call()
    )

    er_client_name = (
        set_er_connection.validate()
        .handle_errors(task_instance_id="er_client_name")
        .partial(**(params_dict.get("er_client_name") or {}))
        .call()
    )

    time_range = (
        set_time_range.validate()
        .handle_errors(task_instance_id="time_range")
        .partial(
            time_format="%d %b %Y %H:%M:%S %Z", **(params_dict.get("time_range") or {})
        )
        .call()
    )

    subject_obs = (
        get_subjectgroup_observations.validate()
        .handle_errors(task_instance_id="subject_obs")
        .partial(
            client=er_client_name,
            time_range=time_range,
            raise_on_empty=True,
            include_details=False,
            **(params_dict.get("subject_obs") or {}),
        )
        .call()
    )

    groupers = (
        set_groupers.validate()
        .handle_errors(task_instance_id="groupers")
        .partial(**(params_dict.get("groupers") or {}))
        .call()
    )

    subject_reloc = (
        process_relocations.validate()
        .handle_errors(task_instance_id="subject_reloc")
        .partial(
            observations=subject_obs,
            relocs_columns=[
                "groupby_col",
                "fixtime",
                "junk_status",
                "geometry",
                "extra__subject__name",
                "extra__subject__subject_subtype",
                "extra__subject__sex",
            ],
            filter_point_coords=[
                {"x": 180.0, "y": 90.0},
                {"x": 0.0, "y": 0.0},
                {"x": 1.0, "y": 1.0},
            ],
            **(params_dict.get("subject_reloc") or {}),
        )
        .call()
    )

    subject_traj = (
        relocations_to_trajectory.validate()
        .handle_errors(task_instance_id="subject_traj")
        .partial(relocations=subject_reloc, **(params_dict.get("subject_traj") or {}))
        .call()
    )

    traj_add_temporal_index = (
        add_temporal_index.validate()
        .handle_errors(task_instance_id="traj_add_temporal_index")
        .partial(
            df=subject_traj,
            time_col="segment_start",
            groupers=groupers,
            cast_to_datetime=True,
            format="mixed",
            **(params_dict.get("traj_add_temporal_index") or {}),
        )
        .call()
    )

    rename_grouper_columns = (
        map_columns.validate()
        .handle_errors(task_instance_id="rename_grouper_columns")
        .partial(
            df=traj_add_temporal_index,
            drop_columns=[],
            retain_columns=[],
            rename_columns={"extra__name": "subject_name"},
            **(params_dict.get("rename_grouper_columns") or {}),
        )
        .call()
    )

    classify_traj_speed = (
        apply_classification.validate()
        .handle_errors(task_instance_id="classify_traj_speed")
        .partial(
            df=rename_grouper_columns,
            input_column_name="speed_kmhr",
            output_column_name="speed_bins",
            classification_options={"scheme": "equal_interval", "k": 6},
            label_options={"label_ranges": False, "label_decimals": 1},
            **(params_dict.get("classify_traj_speed") or {}),
        )
        .call()
    )

    split_subject_traj_groups = (
        split_groups.validate()
        .handle_errors(task_instance_id="split_subject_traj_groups")
        .partial(
            df=classify_traj_speed,
            groupers=groupers,
            **(params_dict.get("split_subject_traj_groups") or {}),
        )
        .call()
    )

    base_map_defs = (
        set_base_maps.validate()
        .handle_errors(task_instance_id="base_map_defs")
        .partial(**(params_dict.get("base_map_defs") or {}))
        .call()
    )

    sort_traj_speed = (
        sort_values.validate()
        .handle_errors(task_instance_id="sort_traj_speed")
        .partial(
            column_name="speed_bins",
            ascending=True,
            na_position="last",
            **(params_dict.get("sort_traj_speed") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    colormap_traj_speed = (
        apply_color_map.validate()
        .handle_errors(task_instance_id="colormap_traj_speed")
        .partial(
            input_column_name="speed_bins",
            output_column_name="speed_bins_colormap",
            colormap=["#1a9850", "#91cf60", "#d9ef8b", "#fee08b", "#fc8d59", "#d73027"],
            **(params_dict.get("colormap_traj_speed") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=sort_traj_speed)
    )

    speedmap_legend_with_unit = (
        map_values_with_unit.validate()
        .handle_errors(task_instance_id="speedmap_legend_with_unit")
        .partial(
            input_column_name="speed_bins",
            output_column_name="speed_bins_formatted",
            original_unit="km/h",
            new_unit="km/h",
            decimal_places=1,
            **(params_dict.get("speedmap_legend_with_unit") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=colormap_traj_speed)
    )

    traj_map_layers = (
        create_polyline_layer.validate()
        .handle_errors(task_instance_id="traj_map_layers")
        .partial(
            layer_style={"color_column": "speed_bins_colormap"},
            legend={
                "label_column": "speed_bins_formatted",
                "color_column": "speed_bins_colormap",
            },
            tooltip_columns=["subject_name", "subject_subtype", "speed_kmhr"],
            **(params_dict.get("traj_map_layers") or {}),
        )
        .mapvalues(argnames=["geodataframe"], argvalues=speedmap_legend_with_unit)
    )

    traj_ecomap = (
        draw_ecomap.validate()
        .handle_errors(task_instance_id="traj_ecomap")
        .partial(
            tile_layers=base_map_defs,
            north_arrow_style={"placement": "top-left"},
            legend_style={"placement": "bottom-right"},
            static=False,
            title=None,
            max_zoom=20,
            **(params_dict.get("traj_ecomap") or {}),
        )
        .mapvalues(argnames=["geo_layers"], argvalues=traj_map_layers)
    )

    ecomap_html_urls = (
        persist_text.validate()
        .handle_errors(task_instance_id="ecomap_html_urls")
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            **(params_dict.get("ecomap_html_urls") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=traj_ecomap)
    )

    traj_map_widgets_single_views = (
        create_map_widget_single_view.validate()
        .handle_errors(task_instance_id="traj_map_widgets_single_views")
        .partial(
            title="Subject Group Speed Map",
            **(params_dict.get("traj_map_widgets_single_views") or {}),
        )
        .map(argnames=["view", "data"], argvalues=ecomap_html_urls)
    )

    traj_grouped_map_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="traj_grouped_map_widget")
        .partial(
            widgets=traj_map_widgets_single_views,
            **(params_dict.get("traj_grouped_map_widget") or {}),
        )
        .call()
    )

    speedmap_dashboard = (
        gather_dashboard.validate()
        .handle_errors(task_instance_id="speedmap_dashboard")
        .partial(
            details=workflow_details,
            widgets=traj_grouped_map_widget,
            time_range=time_range,
            groupers=groupers,
            **(params_dict.get("speedmap_dashboard") or {}),
        )
        .call()
    )

    return speedmap_dashboard
