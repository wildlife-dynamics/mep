# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


# ruff: noqa: E402

# %% [markdown]
# # Collar Voltage
# TODO: top level description

# %% [markdown]
# ## Imports

import os
from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.io import set_er_connection
from ecoscope_workflows_core.tasks.filter import set_time_range
from ecoscope_workflows_ext_ecoscope.tasks.io import get_subjectgroup_observations
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_core.tasks.groupby import split_groups
from ecoscope_workflows_ext_mep.tasks import calculate_collar_voltage
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import create_plot_widget_single_view
from ecoscope_workflows_core.tasks.results import merge_widget_views
from ecoscope_workflows_core.tasks.results import gather_dashboard

# %% [markdown]
# ## Set Workflow Details

# %%
# parameters

workflow_details_params = dict(
    name=...,
    description=...,
    image_url=...,
)

# %%
# call the task


workflow_details = (
    set_workflow_details.handle_errors(task_instance_id="workflow_details")
    .partial(**workflow_details_params)
    .call()
)


# %% [markdown]
# ## Data Source

# %%
# parameters

er_client_name_params = dict(
    data_source=...,
)

# %%
# call the task


er_client_name = (
    set_er_connection.handle_errors(task_instance_id="er_client_name")
    .partial(**er_client_name_params)
    .call()
)


# %% [markdown]
# ## Query Time Range

# %%
# parameters

time_range_params = dict(
    since=...,
    until=...,
)

# %%
# call the task


time_range = (
    set_time_range.handle_errors(task_instance_id="time_range")
    .partial(time_format="%d %b %Y %H:%M:%S %Z", **time_range_params)
    .call()
)


# %% [markdown]
# ## Filter Time Range

# %%
# parameters

filter_time_range_params = dict(
    since=...,
    until=...,
)

# %%
# call the task


filter_time_range = (
    set_time_range.handle_errors(task_instance_id="filter_time_range")
    .partial(time_format="%d %b %Y %H:%M:%S %Z", **filter_time_range_params)
    .call()
)


# %% [markdown]
# ## Get Subject Group Observations from EarthRanger

# %%
# parameters

subject_obs_params = dict(
    subject_group_name=...,
)

# %%
# call the task


subject_obs = (
    get_subjectgroup_observations.handle_errors(task_instance_id="subject_obs")
    .partial(
        client=er_client_name,
        time_range=time_range,
        raise_on_empty=True,
        include_details=True,
        include_subjectsource_details=True,
        **subject_obs_params,
    )
    .call()
)


# %% [markdown]
# ## Set Groupers

# %%
# parameters

groupers_params = dict(
    groupers=...,
)

# %%
# call the task


groupers = (
    set_groupers.handle_errors(task_instance_id="groupers")
    .partial(**groupers_params)
    .call()
)


# %% [markdown]
# ## Split Observations by Group

# %%
# parameters

split_obs_groups_params = dict()

# %%
# call the task


split_obs_groups = (
    split_groups.handle_errors(task_instance_id="split_obs_groups")
    .partial(df=subject_obs, groupers=groupers, **split_obs_groups_params)
    .call()
)


# %% [markdown]
# ## Generate Collar Voltage Plot

# %%
# parameters

collar_voltage_plot_params = dict()

# %%
# call the task


collar_voltage_plot = (
    calculate_collar_voltage.handle_errors(task_instance_id="collar_voltage_plot")
    .partial(time_range=filter_time_range, **collar_voltage_plot_params)
    .mapvalues(argnames=["relocs"], argvalues=split_obs_groups)
)


# %% [markdown]
# ## Persist Voltage Chart as Text

# %%
# parameters

persist_voltage_params = dict(
    filename=...,
)

# %%
# call the task


persist_voltage = (
    persist_text.handle_errors(task_instance_id="persist_voltage")
    .partial(
        root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"], **persist_voltage_params
    )
    .mapvalues(argnames=["text"], argvalues=collar_voltage_plot)
)


# %% [markdown]
# ## Create Voltage Widget

# %%
# parameters

voltage_chart_widget_params = dict()

# %%
# call the task


voltage_chart_widget = (
    create_plot_widget_single_view.handle_errors(
        task_instance_id="voltage_chart_widget"
    )
    .partial(title="Collar Voltage", **voltage_chart_widget_params)
    .map(argnames=["view", "data"], argvalues=persist_voltage)
)


# %% [markdown]
# ## Merge Voltage Widget Views

# %%
# parameters

grouped_voltage_widget_params = dict()

# %%
# call the task


grouped_voltage_widget = (
    merge_widget_views.handle_errors(task_instance_id="grouped_voltage_widget")
    .partial(widgets=voltage_chart_widget, **grouped_voltage_widget_params)
    .call()
)


# %% [markdown]
# ## Create a Dashboard

# %%
# parameters

voltage_dashboard_params = dict()

# %%
# call the task


voltage_dashboard = (
    gather_dashboard.handle_errors(task_instance_id="voltage_dashboard")
    .partial(
        details=workflow_details,
        widgets=grouped_voltage_widget,
        time_range=time_range,
        groupers=groupers,
        **voltage_dashboard_params,
    )
    .call()
)
