# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, Union

from pydantic import (
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    confloat,
    constr,
)


class WorkflowDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., title="Workflow Name")
    description: Optional[str] = Field("", title="Workflow Description")


class TimeRange(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    since: AwareDatetime = Field(..., description="The start time", title="Since")
    until: AwareDatetime = Field(..., description="The end time", title="Until")


class SubjectObs(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    subject_group_name: str = Field(
        ..., description="Name of EarthRanger Subject", title="Subject Group Name"
    )
    include_inactive: Optional[bool] = Field(
        True,
        description="Whether or not to include inactive subjects",
        title="Include Inactive",
    )


class Url(str, Enum):
    https___tile_openstreetmap_org__z___x___y__png = (
        "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
    )


class BaseMaps(BaseModel):
    url: Literal["https://tile.openstreetmap.org/{z}/{x}/{y}.png"] = Field(
        "https://tile.openstreetmap.org/{z}/{x}/{y}.png", title="Preset Layer URL"
    )
    opacity: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description="Set layer transparency from 1 (fully visible) to 0 (hidden).",
        title="Layer Opacity",
    )


class Url1(str, Enum):
    https___server_arcgisonline_com_ArcGIS_rest_services_World_Street_Map_MapServer_tile__z___y___x_ = "https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"


class BaseMaps1(BaseModel):
    url: Literal[
        "https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
    ] = Field(
        "https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}",
        title="Preset Layer URL",
    )
    opacity: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description="Set layer transparency from 1 (fully visible) to 0 (hidden).",
        title="Layer Opacity",
    )


class Url2(str, Enum):
    https___server_arcgisonline_com_ArcGIS_rest_services_World_Imagery_MapServer_tile__z___y___x_ = "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"


class BaseMaps2(BaseModel):
    url: Literal[
        "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
    ] = Field(
        "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
        title="Preset Layer URL",
    )
    opacity: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description="Set layer transparency from 1 (fully visible) to 0 (hidden).",
        title="Layer Opacity",
    )


class Url3(str, Enum):
    https___server_arcgisonline_com_ArcGIS_rest_services_World_Topo_Map_MapServer_tile__z___y___x_ = "https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}"


class BaseMaps3(BaseModel):
    url: Literal[
        "https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}"
    ] = Field(
        "https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}",
        title="Preset Layer URL",
    )
    opacity: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description="Set layer transparency from 1 (fully visible) to 0 (hidden).",
        title="Layer Opacity",
    )


class Url4(str, Enum):
    https___tiles_arcgis_com_tiles_POUcpLYXNckpLjnY_arcgis_rest_services_landDx_basemap_tiles_mapservice_MapServer_tile__z___y___x_ = "https://tiles.arcgis.com/tiles/POUcpLYXNckpLjnY/arcgis/rest/services/landDx_basemap_tiles_mapservice/MapServer/tile/{z}/{y}/{x}"


class BaseMaps4(BaseModel):
    url: Literal[
        "https://tiles.arcgis.com/tiles/POUcpLYXNckpLjnY/arcgis/rest/services/landDx_basemap_tiles_mapservice/MapServer/tile/{z}/{y}/{x}"
    ] = Field(
        "https://tiles.arcgis.com/tiles/POUcpLYXNckpLjnY/arcgis/rest/services/landDx_basemap_tiles_mapservice/MapServer/tile/{z}/{y}/{x}",
        title="Preset Layer URL",
    )
    opacity: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description="Set layer transparency from 1 (fully visible) to 0 (hidden).",
        title="Layer Opacity",
    )


class Url5(str, Enum):
    https___server_arcgisonline_com_arcgis_rest_services_Elevation_World_Hillshade_MapServer_tile__z___y___x_ = "https://server.arcgisonline.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer/tile/{z}/{y}/{x}"


class BaseMaps5(BaseModel):
    url: Literal[
        "https://server.arcgisonline.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer/tile/{z}/{y}/{x}"
    ] = Field(
        "https://server.arcgisonline.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer/tile/{z}/{y}/{x}",
        title="Preset Layer URL",
    )
    opacity: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description="Set layer transparency from 1 (fully visible) to 0 (hidden).",
        title="Layer Opacity",
    )


class BaseMaps6(BaseModel):
    url: Optional[
        constr(
            pattern=r"https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_\+.~#?&//=\{\}]*)"
        )
    ] = Field(
        "https://example.tiles.com/{z}/{x}/{y}.png",
        description="The URL of a publicly accessible tiled raster service.",
        title="Custom Layer URL",
    )
    opacity: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description="Set layer transparency from 1 (fully visible) to 0 (hidden).",
        title="Custom Layer Opacity",
    )
    max_zoom: Optional[int] = Field(
        None,
        description="Set the maximum zoom level to fetch tiles for.",
        title="Custom Layer Max Zoom",
    )
    min_zoom: Optional[int] = Field(
        None,
        description="Set the minimum zoom level to fetch tiles for.",
        title="Custom Layer Min Zoom",
    )


class BaseMapDefs(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    base_maps: Optional[
        List[
            Union[
                BaseMaps,
                BaseMaps1,
                BaseMaps2,
                BaseMaps3,
                BaseMaps4,
                BaseMaps5,
                BaseMaps6,
            ]
        ]
    ] = Field(
        [
            {
                "url": "https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}",
                "opacity": 1,
            },
            {
                "url": "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
                "opacity": 0.5,
            },
        ],
        description="Select tile layers to use as base layers in map outputs. The first layer in the list will be the bottommost layer displayed.",
        title="Set Map Base Layers",
    )


class EarthRangerConnection(BaseModel):
    name: str = Field(..., title="Data Source")


class TemporalGrouper(RootModel[str]):
    root: str = Field(..., title="Time")


class ValueGrouper(RootModel[str]):
    root: str = Field(..., title="Category")


class TrajectorySegmentFilter(BaseModel):
    min_length_meters: Optional[float] = Field(
        0.001, description="Minimum Segment Length in Meters", title="Min Length Meters"
    )
    max_length_meters: Optional[float] = Field(
        100000,
        description="Maximum Segment Length in Meters",
        title="Max Length Meters",
    )
    min_time_secs: Optional[float] = Field(
        1, description="Minimum Segment Duration in Seconds", title="Min Time Secs"
    )
    max_time_secs: Optional[float] = Field(
        172800, description="Maximum Segment Duration in Seconds", title="Max Time Secs"
    )
    min_speed_kmhr: Optional[float] = Field(
        0.0001,
        description="Minimum Segment Speed in Kilometers per Hour",
        title="Min Speed Kmhr",
    )
    max_speed_kmhr: Optional[float] = Field(
        500,
        description="Maximum Segment Speed in Kilometers per Hour",
        title="Max Speed Kmhr",
    )


class ErClientName(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    data_source: EarthRangerConnection = Field(
        ..., description="Select one of your configured data sources.", title=""
    )


class Groupers(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    groupers: Optional[List[Union[ValueGrouper, TemporalGrouper]]] = Field(
        None,
        description="            Specify how the data should be grouped to create the views for your dashboard.\n            This field is optional; if left blank, all the data will appear in a single view.\n            ",
        title=" ",
    )


class SubjectTraj(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    trajectory_segment_filter: Optional[TrajectorySegmentFilter] = Field(
        default_factory=lambda: TrajectorySegmentFilter.model_validate(
            {
                "min_length_meters": 0.001,
                "max_length_meters": 100000,
                "min_time_secs": 1,
                "max_time_secs": 172800,
                "min_speed_kmhr": 0.0001,
                "max_speed_kmhr": 500,
            }
        ),
        description="Trajectory Segments outside these bounds will be removed",
        title="Trajectory Segment Filter",
    )


class Params(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    workflow_details: Optional[WorkflowDetails] = Field(
        None,
        description="Add information that will help to differentiate this workflow from another.",
        title="Set Workflow Details",
    )
    er_client_name: Optional[ErClientName] = Field(
        None, title="Select EarthRanger Data Source"
    )
    time_range: Optional[TimeRange] = Field(
        None, description="Choose the period of time to analyze.", title="Time Range"
    )
    subject_obs: Optional[SubjectObs] = Field(
        None, title="Get Subject Group Observations from EarthRanger"
    )
    groupers: Optional[Groupers] = Field(None, title="Set Groupers")
    subject_traj: Optional[SubjectTraj] = Field(
        None, title="Transform Relocations to Trajectories"
    )
    base_map_defs: Optional[BaseMapDefs] = Field(None, title="Base Maps")
