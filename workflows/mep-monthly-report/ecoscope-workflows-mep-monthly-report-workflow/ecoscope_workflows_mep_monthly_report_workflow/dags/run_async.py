# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details
import json

from ecoscope_workflows_core.graph import DependsOn, Graph, Node

from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.filter import set_time_range
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_core.tasks.analysis import apply_arithmetic_operation
from ecoscope_workflows_ext_mep.tasks import add_one_thousand
from ecoscope_workflows_core.tasks.results import create_single_value_widget_single_view
from ecoscope_workflows_core.tasks.results import gather_dashboard

from ..params import Params


def main(params: Params):
    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    dependencies = {
        "workflow_details": [],
        "time_range": [],
        "groupers": [],
        "calculator": [],
        "add_more": ["calculator"],
        "sv_widgets": ["add_more"],
        "template_dashboard": [
            "workflow_details",
            "sv_widgets",
            "time_range",
            "groupers",
        ],
    }

    nodes = {
        "workflow_details": Node(
            async_task=set_workflow_details.validate()
            .handle_errors(task_instance_id="workflow_details")
            .set_executor("lithops"),
            partial=(params_dict.get("workflow_details") or {}),
            method="call",
        ),
        "time_range": Node(
            async_task=set_time_range.validate()
            .handle_errors(task_instance_id="time_range")
            .set_executor("lithops"),
            partial={
                "time_format": "%d %b %Y %H:%M:%S %Z",
            }
            | (params_dict.get("time_range") or {}),
            method="call",
        ),
        "groupers": Node(
            async_task=set_groupers.validate()
            .handle_errors(task_instance_id="groupers")
            .set_executor("lithops"),
            partial=(params_dict.get("groupers") or {}),
            method="call",
        ),
        "calculator": Node(
            async_task=apply_arithmetic_operation.validate()
            .handle_errors(task_instance_id="calculator")
            .set_executor("lithops"),
            partial=(params_dict.get("calculator") or {}),
            method="call",
        ),
        "add_more": Node(
            async_task=add_one_thousand.validate()
            .handle_errors(task_instance_id="add_more")
            .set_executor("lithops"),
            partial={
                "value": DependsOn("calculator"),
            }
            | (params_dict.get("add_more") or {}),
            method="call",
        ),
        "sv_widgets": Node(
            async_task=create_single_value_widget_single_view.validate()
            .handle_errors(task_instance_id="sv_widgets")
            .set_executor("lithops"),
            partial={
                "title": "Sum",
                "decimal_places": 0,
                "data": DependsOn("add_more"),
            }
            | (params_dict.get("sv_widgets") or {}),
            method="call",
        ),
        "template_dashboard": Node(
            async_task=gather_dashboard.validate()
            .handle_errors(task_instance_id="template_dashboard")
            .set_executor("lithops"),
            partial={
                "details": DependsOn("workflow_details"),
                "widgets": DependsOn("sv_widgets"),
                "time_range": DependsOn("time_range"),
                "groupers": DependsOn("groupers"),
            }
            | (params_dict.get("template_dashboard") or {}),
            method="call",
        ),
    }
    graph = Graph(dependencies=dependencies, nodes=nodes)
    results = graph.execute()
    return results
