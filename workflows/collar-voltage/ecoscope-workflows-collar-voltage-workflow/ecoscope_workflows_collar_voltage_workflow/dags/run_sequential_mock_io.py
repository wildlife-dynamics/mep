# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details

# ruff: noqa: E402

"""WARNING: This file is generated in a testing context and should not be used in production.
Lines specific to the testing context are marked with a test tube emoji (ðŸ§ª) to indicate
that they would not be included (or would be different) in the production version of this file.
"""

import json
import os
import warnings  # ðŸ§ª
from ecoscope_workflows_core.testing import create_task_magicmock  # ðŸ§ª


from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.io import set_er_connection
from ecoscope_workflows_core.tasks.filter import set_time_range

get_subjectgroup_observations = create_task_magicmock(  # ðŸ§ª
    anchor="ecoscope_workflows_ext_ecoscope.tasks.io",  # ðŸ§ª
    func_name="get_subjectgroup_observations",  # ðŸ§ª
)  # ðŸ§ª
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_core.tasks.groupby import split_groups
from ecoscope_workflows_ext_mep.tasks import calculate_collar_voltage
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import create_plot_widget_single_view
from ecoscope_workflows_core.tasks.results import merge_widget_views
from ecoscope_workflows_core.tasks.results import gather_dashboard

from ..params import Params


def main(params: Params):
    warnings.warn("This test script should not be used in production!")  # ðŸ§ª

    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    workflow_details = (
        set_workflow_details.validate()
        .handle_errors(task_instance_id="workflow_details")
        .partial(**(params_dict.get("workflow_details") or {}))
        .call()
    )

    er_client_name = (
        set_er_connection.validate()
        .handle_errors(task_instance_id="er_client_name")
        .partial(**(params_dict.get("er_client_name") or {}))
        .call()
    )

    time_range = (
        set_time_range.validate()
        .handle_errors(task_instance_id="time_range")
        .partial(
            time_format="%d %b %Y %H:%M:%S %Z", **(params_dict.get("time_range") or {})
        )
        .call()
    )

    filter_time_range = (
        set_time_range.validate()
        .handle_errors(task_instance_id="filter_time_range")
        .partial(
            time_format="%d %b %Y %H:%M:%S %Z",
            **(params_dict.get("filter_time_range") or {}),
        )
        .call()
    )

    subject_obs = (
        get_subjectgroup_observations.validate()
        .handle_errors(task_instance_id="subject_obs")
        .partial(
            client=er_client_name,
            time_range=time_range,
            raise_on_empty=True,
            include_details=True,
            include_subjectsource_details=True,
            **(params_dict.get("subject_obs") or {}),
        )
        .call()
    )

    groupers = (
        set_groupers.validate()
        .handle_errors(task_instance_id="groupers")
        .partial(**(params_dict.get("groupers") or {}))
        .call()
    )

    split_obs_groups = (
        split_groups.validate()
        .handle_errors(task_instance_id="split_obs_groups")
        .partial(
            df=subject_obs,
            groupers=groupers,
            **(params_dict.get("split_obs_groups") or {}),
        )
        .call()
    )

    collar_voltage_plot = (
        calculate_collar_voltage.validate()
        .handle_errors(task_instance_id="collar_voltage_plot")
        .partial(
            time_range=filter_time_range,
            **(params_dict.get("collar_voltage_plot") or {}),
        )
        .mapvalues(argnames=["relocs"], argvalues=split_obs_groups)
    )

    persist_voltage = (
        persist_text.validate()
        .handle_errors(task_instance_id="persist_voltage")
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            **(params_dict.get("persist_voltage") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=collar_voltage_plot)
    )

    voltage_chart_widget = (
        create_plot_widget_single_view.validate()
        .handle_errors(task_instance_id="voltage_chart_widget")
        .partial(
            title="Collar Voltage", **(params_dict.get("voltage_chart_widget") or {})
        )
        .map(argnames=["view", "data"], argvalues=persist_voltage)
    )

    grouped_voltage_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="grouped_voltage_widget")
        .partial(
            widgets=voltage_chart_widget,
            **(params_dict.get("grouped_voltage_widget") or {}),
        )
        .call()
    )

    voltage_dashboard = (
        gather_dashboard.validate()
        .handle_errors(task_instance_id="voltage_dashboard")
        .partial(
            details=workflow_details,
            widgets=grouped_voltage_widget,
            time_range=time_range,
            groupers=groupers,
            **(params_dict.get("voltage_dashboard") or {}),
        )
        .call()
    )

    return voltage_dashboard
