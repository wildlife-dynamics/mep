# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details
import json

from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.filter import set_time_range
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_core.tasks.analysis import apply_arithmetic_operation
from ecoscope_workflows_ext_mep.tasks import add_one_thousand
from ecoscope_workflows_core.tasks.results import create_single_value_widget_single_view
from ecoscope_workflows_core.tasks.results import gather_dashboard

from ..params import Params


def main(params: Params):
    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    workflow_details = (
        set_workflow_details.validate()
        .handle_errors(task_instance_id="workflow_details")
        .partial(**(params_dict.get("workflow_details") or {}))
        .call()
    )

    time_range = (
        set_time_range.validate()
        .handle_errors(task_instance_id="time_range")
        .partial(
            time_format="%d %b %Y %H:%M:%S %Z", **(params_dict.get("time_range") or {})
        )
        .call()
    )

    groupers = (
        set_groupers.validate()
        .handle_errors(task_instance_id="groupers")
        .partial(**(params_dict.get("groupers") or {}))
        .call()
    )

    calculator = (
        apply_arithmetic_operation.validate()
        .handle_errors(task_instance_id="calculator")
        .partial(**(params_dict.get("calculator") or {}))
        .call()
    )

    add_more = (
        add_one_thousand.validate()
        .handle_errors(task_instance_id="add_more")
        .partial(value=calculator, **(params_dict.get("add_more") or {}))
        .call()
    )

    sv_widgets = (
        create_single_value_widget_single_view.validate()
        .handle_errors(task_instance_id="sv_widgets")
        .partial(
            title="Sum",
            decimal_places=0,
            data=add_more,
            **(params_dict.get("sv_widgets") or {}),
        )
        .call()
    )

    template_dashboard = (
        gather_dashboard.validate()
        .handle_errors(task_instance_id="template_dashboard")
        .partial(
            details=workflow_details,
            widgets=sv_widgets,
            time_range=time_range,
            groupers=groupers,
            **(params_dict.get("template_dashboard") or {}),
        )
        .call()
    )

    return template_dashboard
