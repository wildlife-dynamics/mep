# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


import json
from pathlib import Path
from typing import Any, get_args

from .formdata import FormData
from .params import Params


def get_rjsf() -> dict[str, Any]:
    with Path(__file__).parent.joinpath("rjsf.json").open() as f:
        return json.load(f)


def get_data_connection_property_names() -> dict[str, list[str]]:
    with Path(__file__).parent.joinpath("params.json").open() as f:
        params = json.load(f)
        data_connections = {}
        for k, v in params["properties"].items():
            if isinstance(v, dict) and v.get("properties"):
                for inner_k, inner_v in v["properties"].items():
                    if isinstance(inner_v, dict) and inner_v.get("$ref"):
                        ref = inner_v.get("$ref")
                        if ref.endswith("Connection"):
                            key = (
                                inner_v.get("$ref")
                                .lstrip("#/$defs/")
                                .rstrip("Connection")
                            )
                            if data_connections.get(key):
                                data_connections[key].append(k)
                            else:
                                data_connections[key] = [k]
    return data_connections


def formdata_to_params(formdata: FormData):
    formdata_asdict: dict[str, dict | Any] = formdata.model_dump()
    params_fieldnames = Params.model_fields.keys()
    params_kws = {}
    for k, v in formdata_asdict.items():
        if k in params_fieldnames:
            params_kws[k] = v
        else:
            for inner_k, inner_v in v.items():
                params_kws[inner_k] = inner_v
    return Params(**params_kws)


def params_to_formdata(params: dict):
    formdata: dict[str, dict] = {}
    aliased_annotations = {
        v.alias: v.annotation for v in FormData.model_fields.values() if v.alias
    }
    task_groups = {
        k: list(get_args(v)[0].model_fields) for k, v in aliased_annotations.items()
    }
    for k, v in params.items():
        if k in FormData.model_fields:
            formdata[k] = v
        else:
            group = next(g for g in task_groups if k in task_groups[g])
            if group in formdata:
                formdata[group].update({k: v})
            else:
                formdata[group] = {k: v}
    return formdata
