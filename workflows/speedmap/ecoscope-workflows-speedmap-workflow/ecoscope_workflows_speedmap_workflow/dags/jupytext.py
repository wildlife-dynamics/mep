# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


# ruff: noqa: E402

# %% [markdown]
# # Speedmap
# TODO: top level description

# %% [markdown]
# ## Imports

import os
from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.io import set_er_connection
from ecoscope_workflows_core.tasks.filter import set_time_range
from ecoscope_workflows_ext_ecoscope.tasks.io import get_subjectgroup_observations
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import process_relocations
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import (
    relocations_to_trajectory,
)
from ecoscope_workflows_core.tasks.transformation import add_temporal_index
from ecoscope_workflows_core.tasks.transformation import map_columns
from ecoscope_workflows_ext_ecoscope.tasks.transformation import apply_classification
from ecoscope_workflows_core.tasks.groupby import split_groups
from ecoscope_workflows_ext_ecoscope.tasks.results import set_base_maps
from ecoscope_workflows_core.tasks.transformation import sort_values
from ecoscope_workflows_ext_ecoscope.tasks.transformation import apply_color_map
from ecoscope_workflows_core.tasks.transformation import map_values_with_unit
from ecoscope_workflows_ext_ecoscope.tasks.results import create_polyline_layer
from ecoscope_workflows_ext_ecoscope.tasks.results import draw_ecomap
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import create_map_widget_single_view
from ecoscope_workflows_core.tasks.results import merge_widget_views
from ecoscope_workflows_core.tasks.results import gather_dashboard

# %% [markdown]
# ## Set Workflow Details

# %%
# parameters

workflow_details_params = dict(
    name=...,
    description=...,
    image_url=...,
)

# %%
# call the task


workflow_details = (
    set_workflow_details.handle_errors(task_instance_id="workflow_details")
    .partial(**workflow_details_params)
    .call()
)


# %% [markdown]
# ## Select EarthRanger Data Source

# %%
# parameters

er_client_name_params = dict(
    data_source=...,
)

# %%
# call the task


er_client_name = (
    set_er_connection.handle_errors(task_instance_id="er_client_name")
    .partial(**er_client_name_params)
    .call()
)


# %% [markdown]
# ## Time Range

# %%
# parameters

time_range_params = dict(
    since=...,
    until=...,
)

# %%
# call the task


time_range = (
    set_time_range.handle_errors(task_instance_id="time_range")
    .partial(time_format="%d %b %Y %H:%M:%S %Z", **time_range_params)
    .call()
)


# %% [markdown]
# ## Get Subject Group Observations from EarthRanger

# %%
# parameters

subject_obs_params = dict(
    subject_group_name=...,
    include_inactive=...,
)

# %%
# call the task


subject_obs = (
    get_subjectgroup_observations.handle_errors(task_instance_id="subject_obs")
    .partial(
        client=er_client_name,
        time_range=time_range,
        raise_on_empty=True,
        include_details=False,
        **subject_obs_params,
    )
    .call()
)


# %% [markdown]
# ## Set Groupers

# %%
# parameters

groupers_params = dict(
    groupers=...,
)

# %%
# call the task


groupers = (
    set_groupers.handle_errors(task_instance_id="groupers")
    .partial(**groupers_params)
    .call()
)


# %% [markdown]
# ## Transform Observations to Relocations

# %%
# parameters

subject_reloc_params = dict()

# %%
# call the task


subject_reloc = (
    process_relocations.handle_errors(task_instance_id="subject_reloc")
    .partial(
        observations=subject_obs,
        relocs_columns=[
            "groupby_col",
            "fixtime",
            "junk_status",
            "geometry",
            "extra__subject__name",
            "extra__subject__subject_subtype",
            "extra__subject__sex",
        ],
        filter_point_coords=[
            {"x": 180.0, "y": 90.0},
            {"x": 0.0, "y": 0.0},
            {"x": 1.0, "y": 1.0},
        ],
        **subject_reloc_params,
    )
    .call()
)


# %% [markdown]
# ## Transform Relocations to Trajectories

# %%
# parameters

subject_traj_params = dict(
    trajectory_segment_filter=...,
)

# %%
# call the task


subject_traj = (
    relocations_to_trajectory.handle_errors(task_instance_id="subject_traj")
    .partial(relocations=subject_reloc, **subject_traj_params)
    .call()
)


# %% [markdown]
# ## Add temporal index to Subject Trajectories

# %%
# parameters

traj_add_temporal_index_params = dict()

# %%
# call the task


traj_add_temporal_index = (
    add_temporal_index.handle_errors(task_instance_id="traj_add_temporal_index")
    .partial(
        df=subject_traj,
        time_col="segment_start",
        groupers=groupers,
        cast_to_datetime=True,
        format="mixed",
        **traj_add_temporal_index_params,
    )
    .call()
)


# %% [markdown]
# ## Rename value grouper columns

# %%
# parameters

rename_grouper_columns_params = dict()

# %%
# call the task


rename_grouper_columns = (
    map_columns.handle_errors(task_instance_id="rename_grouper_columns")
    .partial(
        df=traj_add_temporal_index,
        drop_columns=[],
        retain_columns=[],
        rename_columns={"extra__name": "subject_name"},
        **rename_grouper_columns_params,
    )
    .call()
)


# %% [markdown]
# ## Classify Trajectories By Speed

# %%
# parameters

classify_traj_speed_params = dict()

# %%
# call the task


classify_traj_speed = (
    apply_classification.handle_errors(task_instance_id="classify_traj_speed")
    .partial(
        df=rename_grouper_columns,
        input_column_name="speed_kmhr",
        output_column_name="speed_bins",
        classification_options={"scheme": "equal_interval", "k": 6},
        label_options={"label_ranges": False, "label_decimals": 1},
        **classify_traj_speed_params,
    )
    .call()
)


# %% [markdown]
# ## Split Subject Trajectories by Group

# %%
# parameters

split_subject_traj_groups_params = dict()

# %%
# call the task


split_subject_traj_groups = (
    split_groups.handle_errors(task_instance_id="split_subject_traj_groups")
    .partial(
        df=classify_traj_speed, groupers=groupers, **split_subject_traj_groups_params
    )
    .call()
)


# %% [markdown]
# ## Base Maps

# %%
# parameters

base_map_defs_params = dict(
    base_maps=...,
)

# %%
# call the task


base_map_defs = (
    set_base_maps.handle_errors(task_instance_id="base_map_defs")
    .partial(**base_map_defs_params)
    .call()
)


# %% [markdown]
# ## Sort Trajetories By Classification

# %%
# parameters

sort_traj_speed_params = dict()

# %%
# call the task


sort_traj_speed = (
    sort_values.handle_errors(task_instance_id="sort_traj_speed")
    .partial(
        column_name="speed_bins",
        ascending=True,
        na_position="last",
        **sort_traj_speed_params,
    )
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Apply Color to Trajectories By Speed

# %%
# parameters

colormap_traj_speed_params = dict()

# %%
# call the task


colormap_traj_speed = (
    apply_color_map.handle_errors(task_instance_id="colormap_traj_speed")
    .partial(
        input_column_name="speed_bins",
        output_column_name="speed_bins_colormap",
        colormap=["#1a9850", "#91cf60", "#d9ef8b", "#fee08b", "#fc8d59", "#d73027"],
        **colormap_traj_speed_params,
    )
    .mapvalues(argnames=["df"], argvalues=sort_traj_speed)
)


# %% [markdown]
# ## Format Speedmap Legend Label

# %%
# parameters

speedmap_legend_with_unit_params = dict()

# %%
# call the task


speedmap_legend_with_unit = (
    map_values_with_unit.handle_errors(task_instance_id="speedmap_legend_with_unit")
    .partial(
        input_column_name="speed_bins",
        output_column_name="speed_bins_formatted",
        original_unit="km/h",
        new_unit="km/h",
        decimal_places=1,
        **speedmap_legend_with_unit_params,
    )
    .mapvalues(argnames=["df"], argvalues=colormap_traj_speed)
)


# %% [markdown]
# ## Create map layer for each trajectory group

# %%
# parameters

traj_map_layers_params = dict(
    zoom=...,
)

# %%
# call the task


traj_map_layers = (
    create_polyline_layer.handle_errors(task_instance_id="traj_map_layers")
    .partial(
        layer_style={"color_column": "speed_bins_colormap"},
        legend={
            "label_column": "speed_bins_formatted",
            "color_column": "speed_bins_colormap",
        },
        tooltip_columns=["subject_name", "subject_subtype", "speed_kmhr"],
        **traj_map_layers_params,
    )
    .mapvalues(argnames=["geodataframe"], argvalues=speedmap_legend_with_unit)
)


# %% [markdown]
# ## Draw Ecomaps for each trajectory group

# %%
# parameters

traj_ecomap_params = dict(
    view_state=...,
)

# %%
# call the task


traj_ecomap = (
    draw_ecomap.handle_errors(task_instance_id="traj_ecomap")
    .partial(
        tile_layers=base_map_defs,
        north_arrow_style={"placement": "top-left"},
        legend_style={"placement": "bottom-right"},
        static=False,
        title=None,
        max_zoom=20,
        **traj_ecomap_params,
    )
    .mapvalues(argnames=["geo_layers"], argvalues=traj_map_layers)
)


# %% [markdown]
# ## Persist ecomap as Text

# %%
# parameters

ecomap_html_urls_params = dict(
    filename=...,
)

# %%
# call the task


ecomap_html_urls = (
    persist_text.handle_errors(task_instance_id="ecomap_html_urls")
    .partial(
        root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"], **ecomap_html_urls_params
    )
    .mapvalues(argnames=["text"], argvalues=traj_ecomap)
)


# %% [markdown]
# ## Create Map Widgets for Trajectories

# %%
# parameters

traj_map_widgets_single_views_params = dict()

# %%
# call the task


traj_map_widgets_single_views = (
    create_map_widget_single_view.handle_errors(
        task_instance_id="traj_map_widgets_single_views"
    )
    .partial(title="Subject Group Speed Map", **traj_map_widgets_single_views_params)
    .map(argnames=["view", "data"], argvalues=ecomap_html_urls)
)


# %% [markdown]
# ## Merge EcoMap Widget Views

# %%
# parameters

traj_grouped_map_widget_params = dict()

# %%
# call the task


traj_grouped_map_widget = (
    merge_widget_views.handle_errors(task_instance_id="traj_grouped_map_widget")
    .partial(widgets=traj_map_widgets_single_views, **traj_grouped_map_widget_params)
    .call()
)


# %% [markdown]
# ## Create A Dashboard

# %%
# parameters

speedmap_dashboard_params = dict()

# %%
# call the task


speedmap_dashboard = (
    gather_dashboard.handle_errors(task_instance_id="speedmap_dashboard")
    .partial(
        details=workflow_details,
        widgets=traj_grouped_map_widget,
        time_range=time_range,
        groupers=groupers,
        **speedmap_dashboard_params,
    )
    .call()
)
