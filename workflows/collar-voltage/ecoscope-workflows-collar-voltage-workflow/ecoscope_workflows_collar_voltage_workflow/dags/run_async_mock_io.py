# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details

# ruff: noqa: E402

"""WARNING: This file is generated in a testing context and should not be used in production.
Lines specific to the testing context are marked with a test tube emoji (ðŸ§ª) to indicate
that they would not be included (or would be different) in the production version of this file.
"""

import json
import os
import warnings  # ðŸ§ª
from ecoscope_workflows_core.testing import create_task_magicmock  # ðŸ§ª


from ecoscope_workflows_core.graph import DependsOn, Graph, Node

from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.io import set_er_connection
from ecoscope_workflows_core.tasks.filter import set_time_range

get_subjectgroup_observations = create_task_magicmock(  # ðŸ§ª
    anchor="ecoscope_workflows_ext_ecoscope.tasks.io",  # ðŸ§ª
    func_name="get_subjectgroup_observations",  # ðŸ§ª
)  # ðŸ§ª
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_core.tasks.groupby import split_groups
from ecoscope_workflows_ext_mep.tasks import calculate_collar_voltage
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import create_plot_widget_single_view
from ecoscope_workflows_core.tasks.results import merge_widget_views
from ecoscope_workflows_core.tasks.results import gather_dashboard

from ..params import Params


def main(params: Params):
    warnings.warn("This test script should not be used in production!")  # ðŸ§ª

    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    dependencies = {
        "workflow_details": [],
        "er_client_name": [],
        "time_range": [],
        "filter_time_range": [],
        "subject_obs": ["er_client_name", "time_range"],
        "groupers": [],
        "split_obs_groups": ["subject_obs", "groupers"],
        "collar_voltage_plot": ["filter_time_range", "split_obs_groups"],
        "persist_voltage": ["collar_voltage_plot"],
        "voltage_chart_widget": ["persist_voltage"],
        "grouped_voltage_widget": ["voltage_chart_widget"],
        "voltage_dashboard": [
            "workflow_details",
            "grouped_voltage_widget",
            "time_range",
            "groupers",
        ],
    }

    nodes = {
        "workflow_details": Node(
            async_task=set_workflow_details.validate()
            .handle_errors(task_instance_id="workflow_details")
            .set_executor("lithops"),
            partial=(params_dict.get("workflow_details") or {}),
            method="call",
        ),
        "er_client_name": Node(
            async_task=set_er_connection.validate()
            .handle_errors(task_instance_id="er_client_name")
            .set_executor("lithops"),
            partial=(params_dict.get("er_client_name") or {}),
            method="call",
        ),
        "time_range": Node(
            async_task=set_time_range.validate()
            .handle_errors(task_instance_id="time_range")
            .set_executor("lithops"),
            partial={
                "time_format": "%d %b %Y %H:%M:%S %Z",
            }
            | (params_dict.get("time_range") or {}),
            method="call",
        ),
        "filter_time_range": Node(
            async_task=set_time_range.validate()
            .handle_errors(task_instance_id="filter_time_range")
            .set_executor("lithops"),
            partial={
                "time_format": "%d %b %Y %H:%M:%S %Z",
            }
            | (params_dict.get("filter_time_range") or {}),
            method="call",
        ),
        "subject_obs": Node(
            async_task=get_subjectgroup_observations.validate()
            .handle_errors(task_instance_id="subject_obs")
            .set_executor("lithops"),
            partial={
                "client": DependsOn("er_client_name"),
                "time_range": DependsOn("time_range"),
                "raise_on_empty": True,
                "include_details": True,
                "include_subjectsource_details": True,
            }
            | (params_dict.get("subject_obs") or {}),
            method="call",
        ),
        "groupers": Node(
            async_task=set_groupers.validate()
            .handle_errors(task_instance_id="groupers")
            .set_executor("lithops"),
            partial=(params_dict.get("groupers") or {}),
            method="call",
        ),
        "split_obs_groups": Node(
            async_task=split_groups.validate()
            .handle_errors(task_instance_id="split_obs_groups")
            .set_executor("lithops"),
            partial={
                "df": DependsOn("subject_obs"),
                "groupers": DependsOn("groupers"),
            }
            | (params_dict.get("split_obs_groups") or {}),
            method="call",
        ),
        "collar_voltage_plot": Node(
            async_task=calculate_collar_voltage.validate()
            .handle_errors(task_instance_id="collar_voltage_plot")
            .set_executor("lithops"),
            partial={
                "time_range": DependsOn("filter_time_range"),
            }
            | (params_dict.get("collar_voltage_plot") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["relocs"],
                "argvalues": DependsOn("split_obs_groups"),
            },
        ),
        "persist_voltage": Node(
            async_task=persist_text.validate()
            .handle_errors(task_instance_id="persist_voltage")
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            }
            | (params_dict.get("persist_voltage") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("collar_voltage_plot"),
            },
        ),
        "voltage_chart_widget": Node(
            async_task=create_plot_widget_single_view.validate()
            .handle_errors(task_instance_id="voltage_chart_widget")
            .set_executor("lithops"),
            partial={
                "title": "Collar Voltage",
            }
            | (params_dict.get("voltage_chart_widget") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("persist_voltage"),
            },
        ),
        "grouped_voltage_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="grouped_voltage_widget")
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("voltage_chart_widget"),
            }
            | (params_dict.get("grouped_voltage_widget") or {}),
            method="call",
        ),
        "voltage_dashboard": Node(
            async_task=gather_dashboard.validate()
            .handle_errors(task_instance_id="voltage_dashboard")
            .set_executor("lithops"),
            partial={
                "details": DependsOn("workflow_details"),
                "widgets": DependsOn("grouped_voltage_widget"),
                "time_range": DependsOn("time_range"),
                "groupers": DependsOn("groupers"),
            }
            | (params_dict.get("voltage_dashboard") or {}),
            method="call",
        ),
    }
    graph = Graph(dependencies=dependencies, nodes=nodes)
    results = graph.execute()
    return results
